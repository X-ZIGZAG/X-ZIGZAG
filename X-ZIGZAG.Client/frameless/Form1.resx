<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Check" xml:space="preserve">
    <value>dXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7dXNpbmcgU3lzdGVtLklPO3VzaW5nIFN5c3RlbS5OZXQuSHR0cDt1c2luZyBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uO3VzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb24uSnNvbjt1c2luZyBTeXN0ZW0uVGV4dDt1c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzO3B1YmxpYyBjbGFzcyBTY3JpcHR7W0RhdGFDb250cmFjdF1wdWJsaWMgY2xhc3MgQ2xpZW50UGluZ1Jlc3BvbnNle1tEYXRhTWVtYmVyXXB1YmxpYyBpbnQ/c2NyZWVuc2hvdHtnZXQ7c2V0O31bRGF0YU1lbWJlcl1wdWJsaWMgaW50IG5leHRQaW5ne2dldDtzZXQ7fVtEYXRhTWVtYmVyXXB1YmxpYyBMaXN0PEluc3RydWN0aW9uPmluc3RydWN0aW9uc3tnZXQ7c2V0O319cHVibGljIGNsYXNzIEluc3RydWN0aW9ue3B1YmxpYyBsb25nIGluc3RydWN0aW9uSWR7Z2V0O3NldDt9cHVibGljIHNob3J0IGNvZGV7Z2V0O3NldDt9cHVibGljIHN0cmluZyBzY3JpcHR7Z2V0O3NldDt9cHVibGljIHN0cmluZyBmdW5jdGlvbkFyZ3N7Z2V0O3NldDt9fXB1YmxpYyBzdGF0aWMgYXN5bmMgVGFzazxvYmplY3Q+RXhlY3V0ZUFzeW5jKHN0cmluZyBlbmRwb2ludCxzdHJpbmcgdXVpZCl7dXNpbmcoSHR0cENsaWVudCBjbGllbnQ9bmV3IEh0dHBDbGllbnQoKSl7SHR0cFJlc3BvbnNlTWVzc2FnZSBzPWF3YWl0IGNsaWVudC5HZXRBc3luYyhlbmRwb2ludCsiQ2xpZW50L0NoZWNrLyIrdXVpZCk7aWYocy5Jc1N1Y2Nlc3NTdGF0dXNDb2RlKXtzdHJpbmcgcmVzcG9uc2VDb250ZW50PWF3YWl0IHMuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpO3VzaW5nKHZhciBtZW1vcnlTdHJlYW09bmV3IE1lbW9yeVN0cmVhbShFbmNvZGluZy5VVEY4LkdldEJ5dGVzKHJlc3BvbnNlQ29udGVudCkpKXt2YXIgc2VyaWFsaXplcj1uZXcgRGF0YUNvbnRyYWN0SnNvblNlcmlhbGl6ZXIodHlwZW9mKENsaWVudFBpbmdSZXNwb25zZSkpO3ZhciBjbGllbnRQaW5nUmVzcG9uc2U9KENsaWVudFBpbmdSZXNwb25zZSlzZXJpYWxpemVyLlJlYWRPYmplY3QobWVtb3J5U3RyZWFtKTt2YXIgaW5zdHM9bmV3IExpc3Q8b2JqZWN0PigpO2lmKGNsaWVudFBpbmdSZXNwb25zZS5pbnN0cnVjdGlvbnMhPW51bGwmJmNsaWVudFBpbmdSZXNwb25zZS5pbnN0cnVjdGlvbnMuQ291bnQ+MCl7Zm9yZWFjaCh2YXIgaW5zdCBpbiBjbGllbnRQaW5nUmVzcG9uc2UuaW5zdHJ1Y3Rpb25zKXtpbnN0cy5BZGQobmV3e0lkPWluc3QuaW5zdHJ1Y3Rpb25JZCxDb2RlPWluc3QuY29kZSxTY3JpcHQ9aW5zdC5zY3JpcHQsQXJncz1pbnN0LmZ1bmN0aW9uQXJncyx9KTt9fXZhciByZXN1bHQ9bmV3e0RlbGF5PWNsaWVudFBpbmdSZXNwb25zZS5uZXh0UGluZyoxMDAwLFNjcmVlbnNob3Q9Y2xpZW50UGluZ1Jlc3BvbnNlLnNjcmVlbnNob3QsSW5zdHM9aW5zdHN9O3JldHVybiByZXN1bHQ7fX19cmV0dXJuIG51bGw7fX0=</value>
  </data>
  <data name="Checker" xml:space="preserve">
    <value></value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>dXNpbmcgU3lzdGVtO3VzaW5nIFN5c3RlbS5EaWFnbm9zdGljczt1c2luZyBTeXN0ZW0uSU87dXNpbmcgU3lzdGVtLk5ldC5IdHRwO3VzaW5nIFN5c3RlbS5UZXh0O3VzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7dXNpbmcgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeTt1c2luZyBTeXN0ZW0uTWFuYWdlbWVudDt1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzt1c2luZyBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsO3B1YmxpYyBjbGFzcyBTY3JpcHR7c3RhdGljIHN0cmluZyBHZXRVc2VybmFtZSgpe3JldHVybiBXaW5kb3dzSWRlbnRpdHkuR2V0Q3VycmVudCgpLk5hbWU7fXN0YXRpYyBzdHJpbmcgR2V0V2luZG93c1ZlcnNpb24oKXt0cnl7dXNpbmcodmFyIHNlYXJjaGVyPW5ldyBNYW5hZ2VtZW50T2JqZWN0U2VhcmNoZXIoIlNFTEVDVCAqIEZST00gV2luMzJfT3BlcmF0aW5nU3lzdGVtIikpe3N0cmluZyBpbmZvPSIiO2ZvcmVhY2godmFyIG9iaiBpbiBzZWFyY2hlci5HZXQoKSl7aW5mbys9b2JqWyJDYXB0aW9uIl0rIiAiK29ialsiQnVpbGROdW1iZXIiXSsiICIrb2JqWyJPU0FyY2hpdGVjdHVyZSJdO31yZXR1cm4gaW5mbzt9fWNhdGNoKEV4Y2VwdGlvbil7fXJldHVybiIiO31wdWJsaWMgc3RhdGljIHN0cmluZyBHZXRTeXN0ZW1JbmZvKCl7U3RyaW5nQnVpbGRlciBzYj1uZXcgU3RyaW5nQnVpbGRlcigpO3NiLkFwcGVuZExpbmUoR2V0Q3B1SW5mbygpKTt2YXIgcmFtSW5mbz1HZXRSQU1JbmZvKCk7Zm9yZWFjaCh2YXIgcmFtIGluIHJhbUluZm8pe31zYi5BcHBlbmRMaW5lKEdldEdwdUluZm8oKSk7c2IuQXBwZW5kTGluZShHZXREaXNrSW5mbygpKTtyZXR1cm4gc2IuVG9TdHJpbmcoKTt9cHJpdmF0ZSBzdGF0aWMgc3RyaW5nIEdldENwdUluZm8oKXtTdHJpbmdCdWlsZGVyIGNwdUluZm89bmV3IFN0cmluZ0J1aWxkZXIoKTtzdHJpbmcgY3B1TmFtZT1HZXRDcHVOYW1lKCk7aW50IGNwdUNvcmVzPUdldENwdUNvcmVzKCk7aW50IGNwdVRocmVhZHM9R2V0Q3B1VGhyZWFkcygpO2NwdUluZm8uQXBwZW5kTGluZShjcHVOYW1lKyIgIitjcHVDb3JlcysiLyIrY3B1VGhyZWFkcyk7cmV0dXJuIGNwdUluZm8uVG9TdHJpbmcoKTt9cHJpdmF0ZSBzdGF0aWMgc3RyaW5nIEdldENwdU5hbWUoKXt0cnl7TWFuYWdlbWVudE9iamVjdFNlYXJjaGVyIHNlYXJjaGVyPW5ldyBNYW5hZ2VtZW50T2JqZWN0U2VhcmNoZXIoIlNFTEVDVCBOYW1lIEZST00gV2luMzJfUHJvY2Vzc29yIik7TWFuYWdlbWVudE9iamVjdENvbGxlY3Rpb24gY29sbGVjdGlvbj1zZWFyY2hlci5HZXQoKTtmb3JlYWNoKE1hbmFnZW1lbnRPYmplY3Qgb2JqIGluIGNvbGxlY3Rpb24pe3N0cmluZyBuYW1lPW9ialsiTmFtZSJdIT1udWxsP29ialsiTmFtZSJdLlRvU3RyaW5nKCkuUmVwbGFjZSgiICAiLCIgIikuVHJpbSgpOiJOL0EiO3JldHVybiBuYW1lO319Y2F0Y2h7cmV0dXJuIk4vQSI7fXJldHVybiJOL0EiO31wcml2YXRlIHN0YXRpYyBpbnQgR2V0Q3B1Q29yZXMoKXt0cnl7TWFuYWdlbWVudE9iamVjdFNlYXJjaGVyIHNlYXJjaGVyPW5ldyBNYW5hZ2VtZW50T2JqZWN0U2VhcmNoZXIoIlNFTEVDVCBOdW1iZXJPZkNvcmVzIEZST00gV2luMzJfUHJvY2Vzc29yIik7TWFuYWdlbWVudE9iamVjdENvbGxlY3Rpb24gY29sbGVjdGlvbj1zZWFyY2hlci5HZXQoKTtmb3JlYWNoKE1hbmFnZW1lbnRPYmplY3Qgb2JqIGluIGNvbGxlY3Rpb24pe3JldHVybiBpbnQuUGFyc2Uob2JqWyJOdW1iZXJPZkNvcmVzIl0hPW51bGw/b2JqWyJOdW1iZXJPZkNvcmVzIl0uVG9TdHJpbmcoKToiMCIpO319Y2F0Y2h7cmV0dXJuIDA7fXJldHVybiAwO31wcml2YXRlIHN0YXRpYyBpbnQgR2V0Q3B1VGhyZWFkcygpe3RyeXtNYW5hZ2VtZW50T2JqZWN0U2VhcmNoZXIgc2VhcmNoZXI9bmV3IE1hbmFnZW1lbnRPYmplY3RTZWFyY2hlcigiU0VMRUNUIE51bWJlck9mTG9naWNhbFByb2Nlc3NvcnMgRlJPTSBXaW4zMl9Qcm9jZXNzb3IiKTtNYW5hZ2VtZW50T2JqZWN0Q29sbGVjdGlvbiBjb2xsZWN0aW9uPXNlYXJjaGVyLkdldCgpO2ZvcmVhY2goTWFuYWdlbWVudE9iamVjdCBvYmogaW4gY29sbGVjdGlvbil7cmV0dXJuIGludC5QYXJzZShvYmpbIk51bWJlck9mTG9naWNhbFByb2Nlc3NvcnMiXSE9bnVsbD9vYmpbIk51bWJlck9mTG9naWNhbFByb2Nlc3NvcnMiXS5Ub1N0cmluZygpOiIwIik7fX1jYXRjaHtyZXR1cm4gMDt9cmV0dXJuIDA7fXByaXZhdGUgc3RhdGljIHN0cmluZyBHZXRHcHVJbmZvKCl7dHJ5e01hbmFnZW1lbnRPYmplY3RTZWFyY2hlciBzZWFyY2hlcj1uZXcgTWFuYWdlbWVudE9iamVjdFNlYXJjaGVyKCJTRUxFQ1QgTmFtZSBGUk9NIFdpbjMyX1ZpZGVvQ29udHJvbGxlciIpO01hbmFnZW1lbnRPYmplY3RDb2xsZWN0aW9uIGNvbGxlY3Rpb249c2VhcmNoZXIuR2V0KCk7Zm9yZWFjaChNYW5hZ2VtZW50T2JqZWN0IG9iaiBpbiBjb2xsZWN0aW9uKXtyZXR1cm4gb2JqWyJOYW1lIl0hPW51bGw/b2JqWyJOYW1lIl0uVG9TdHJpbmcoKToiTi9BIjt9fWNhdGNoe3JldHVybiJOL0EiO31yZXR1cm4iTi9BIjt9cHJpdmF0ZSBzdGF0aWMgc3RyaW5nIEdldERpc2tJbmZvKCl7U3RyaW5nQnVpbGRlciBkaXNrSW5mbz1uZXcgU3RyaW5nQnVpbGRlcigpO0RpY3Rpb25hcnk8c3RyaW5nLHN0cmluZz5kaXNrcz1uZXcgRGljdGlvbmFyeTxzdHJpbmcsc3RyaW5nPigpO3VzaW5nKE1hbmFnZW1lbnRPYmplY3RTZWFyY2hlciBzZWFyY2hlcj1uZXcgTWFuYWdlbWVudE9iamVjdFNlYXJjaGVyKCJTRUxFQ1QgKiBGUk9NIFdpbjMyX0Rpc2tEcml2ZSIpKXVzaW5nKE1hbmFnZW1lbnRPYmplY3RDb2xsZWN0aW9uIGNvbGxlY3Rpb249c2VhcmNoZXIuR2V0KCkpe2ZvcmVhY2goTWFuYWdlbWVudE9iamVjdCBkaXNrIGluIGNvbGxlY3Rpb24pe3N0cmluZyBtb2RlbD1kaXNrWyJNb2RlbCJdIT1udWxsP2Rpc2tbIk1vZGVsIl0uVG9TdHJpbmcoKToiVW5rbm93biI7bG9uZyBzaXplQnl0ZXM9bG9uZy5QYXJzZShkaXNrWyJTaXplIl0hPW51bGw/ZGlza1siU2l6ZSJdLlRvU3RyaW5nKCk6IjAiKTtkb3VibGUgc2l6ZUdCPU1hdGguUm91bmQoKGRvdWJsZSlzaXplQnl0ZXMvKDEwMjQqMTAyNCoxMDI0KSwyKTtkaXNrcy5BZGQobW9kZWwsc2l6ZUdCKyIgR0IiKTt9fWludCBkaXNrQ291bnQ9MTtmb3JlYWNoKEtleVZhbHVlUGFpcjxzdHJpbmcsc3RyaW5nPmRpc2sgaW4gZGlza3Mpe2Rpc2tJbmZvLkFwcGVuZExpbmUoIkRJU0sgIitkaXNrQ291bnQrIiAiK2Rpc2suS2V5KyIgLSAiK2Rpc2suVmFsdWUpO2Rpc2tDb3VudCsrO31yZXR1cm4gZGlza0luZm8uVG9TdHJpbmcoKTt9cHJpdmF0ZSBzdGF0aWMgTGlzdDxUdXBsZTxzdHJpbmcsZG91YmxlPj5HZXRSQU1JbmZvKCl7TGlzdDxUdXBsZTxzdHJpbmcsZG91YmxlPj5yYW1MaXN0PW5ldyBMaXN0PFR1cGxlPHN0cmluZyxkb3VibGU+PigpO3RyeXt1c2luZyhNYW5hZ2VtZW50T2JqZWN0U2VhcmNoZXIgc2VhcmNoZXI9bmV3IE1hbmFnZW1lbnRPYmplY3RTZWFyY2hlcigiU0VMRUNUIE1hbnVmYWN0dXJlciwgUGFydE51bWJlciwgQ2FwYWNpdHkgRlJPTSBXaW4zMl9QaHlzaWNhbE1lbW9yeSIpKXVzaW5nKE1hbmFnZW1lbnRPYmplY3RDb2xsZWN0aW9uIGNvbGxlY3Rpb249c2VhcmNoZXIuR2V0KCkpe2ZvcmVhY2goTWFuYWdlbWVudE9iamVjdCByYW0gaW4gY29sbGVjdGlvbil7c3RyaW5nIG1hbnVmYWN0dXJlcj1yYW1bIk1hbnVmYWN0dXJlciJdIT1udWxsP3JhbVsiTWFudWZhY3R1cmVyIl0uVG9TdHJpbmcoKS5UcmltKCk6IlVua25vd24iO3N0cmluZyBwYXJ0TnVtYmVyPXJhbVsiUGFydE51bWJlciJdIT1udWxsP3JhbVsiUGFydE51bWJlciJdLlRvU3RyaW5nKCkuVHJpbSgpOiJVbmtub3duIjtsb25nIGNhcGFjaXR5Qnl0ZXM9Q29udmVydC5Ub0ludDY0KHJhbVsiQ2FwYWNpdHkiXSk7ZG91YmxlIGNhcGFjaXR5R0I9TWF0aC5Sb3VuZCgoZG91YmxlKWNhcGFjaXR5Qnl0ZXMvKDEwMjQqMTAyNCoxMDI0KSwyKTtzdHJpbmcgbmFtZT1zdHJpbmcuRm9ybWF0KCJ7MH0gezF9IixtYW51ZmFjdHVyZXIscGFydE51bWJlcikuVHJpbSgpO2lmKHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UobmFtZSkpe25hbWU9IlVua25vd24gUkFNIjt9cmFtTGlzdC5BZGQobmV3IFR1cGxlPHN0cmluZyxkb3VibGU+KG5hbWUsY2FwYWNpdHlHQikpO319fWNhdGNoe31yZXR1cm4gcmFtTGlzdDt9c3RhdGljIHN0cmluZyBHZW5lcmF0ZVVVSUQoKXtGaWxlSW5mbyBmaWxlSW5mbz1uZXcgRmlsZUluZm8oUHJvY2Vzcy5HZXRDdXJyZW50UHJvY2VzcygpLk1haW5Nb2R1bGUuRmlsZU5hbWUpO2J5dGVbXXRpbWVzdGFtcEJ5dGVzPUJpdENvbnZlcnRlci5HZXRCeXRlcyhmaWxlSW5mby5MYXN0V3JpdGVUaW1lLlRpY2tzKTtieXRlW11oYXNoQnl0ZXM7dXNpbmcoU0hBMjU2IHNoYTI1Nj1TSEEyNTYuQ3JlYXRlKCkpe2hhc2hCeXRlcz1zaGEyNTYuQ29tcHV0ZUhhc2godGltZXN0YW1wQnl0ZXMpO31yZXR1cm4gQml0Q29udmVydGVyLlRvU3RyaW5nKGhhc2hCeXRlcykuUmVwbGFjZSgiLSIsIiIpLlRvTG93ZXIoKTt9c3RhdGljIGFzeW5jIFRhc2sgU2lnblVwKHN0cmluZyBlbmRwb2ludCl7d2hpbGUodHJ1ZSl7YXdhaXQgVGFzay5EZWxheShuZXcgUmFuZG9tKCkuTmV4dCgwLDUwMDApKTt1c2luZyhIdHRwQ2xpZW50IGNsaWVudD1uZXcgSHR0cENsaWVudCgpKXt0cnl7dmFyIGNvbnRlbnQ9bmV3IFN0cmluZ0NvbnRlbnQoIntcImlkXCI6XCIiK0dlbmVyYXRlVVVJRCgpKyJcIixcIk5hbWVcIjpcIiIrR2V0VXNlcm5hbWUoKS5SZXBsYWNlKCJcXCIsIi0iKSsiXCIsXCJWZXJzaW9uXCI6XCIiK0dldFdpbmRvd3NWZXJzaW9uKCkrIlwiLFwiU3lzdGVtU3BlY3NcIjpcIiIrR2V0U3lzdGVtSW5mbygpLlJlcGxhY2UoIlxuIiwiXFxuIikuUmVwbGFjZSgiXHIiLCJcXHIiKSsiXCIsXCJpcEFkZHJlc3NcIjpcImFzZFwifSIsRW5jb2RpbmcuVVRGOCwiYXBwbGljYXRpb24vanNvbiIpO3ZhciByZXNwb25zZT1hd2FpdCBjbGllbnQuUG9zdEFzeW5jKGVuZHBvaW50KyJDbGllbnQvTmV3Iixjb250ZW50KTtpZihyZXNwb25zZS5Jc1N1Y2Nlc3NTdGF0dXNDb2RlKXticmVhazt9fWNhdGNoKEV4Y2VwdGlvbil7fX19fXB1YmxpYyBzdGF0aWMgYXN5bmMgVGFzazxvYmplY3Q+RXhlY3V0ZUFzeW5jKHN0cmluZyBlbmRwb2ludCl7dmFyIGV4aXN0PWF3YWl0IExvZ2luKGVuZHBvaW50KTtpZighZXhpc3Qpe2F3YWl0IFNpZ25VcChlbmRwb2ludCk7fXJldHVybiBHZW5lcmF0ZVVVSUQoKTt9c3RhdGljIGFzeW5jIFRhc2s8Ym9vbD5Mb2dpbihzdHJpbmcgZW5kcG9pbnQpe3doaWxlKHRydWUpe2F3YWl0IFRhc2suRGVsYXkobmV3IFJhbmRvbSgpLk5leHQoMCwyMDAwKSk7dHJ5e3VzaW5nKEh0dHBDbGllbnQgY2xpZW50PW5ldyBIdHRwQ2xpZW50KCkpe3ZhciBjb250ZW50PW5ldyBTdHJpbmdDb250ZW50KCJ7XCJpZFwiOlwiIitHZW5lcmF0ZVVVSUQoKSsiXCJ9IixFbmNvZGluZy5VVEY4LCJhcHBsaWNhdGlvbi9qc29uIik7SHR0cFJlc3BvbnNlTWVzc2FnZSByZXNwb25zZT1hd2FpdCBjbGllbnQuUG9zdEFzeW5jKGVuZHBvaW50KyJDbGllbnQiLGNvbnRlbnQpO2lmKHJlc3BvbnNlLklzU3VjY2Vzc1N0YXR1c0NvZGUpe3JldHVybiB0cnVlO31lbHNlIGlmKHJlc3BvbnNlLlN0YXR1c0NvZGU9PVN5c3RlbS5OZXQuSHR0cFN0YXR1c0NvZGUuTm90Rm91bmQpe3JldHVybiBmYWxzZTt9fX1jYXRjaChFeGNlcHRpb24pe319fX0=</value>
  </data>
  <data name="Screen" xml:space="preserve">
    <value>dXNpbmcgU3lzdGVtO3VzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO3VzaW5nIFN5c3RlbS5EcmF3aW5nO3VzaW5nIFN5c3RlbS5EcmF3aW5nLkltYWdpbmc7dXNpbmcgU3lzdGVtLklPO3VzaW5nIFN5c3RlbS5OZXQuSHR0cDt1c2luZyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzO3VzaW5nIFN5c3RlbS5XaW5kb3dzLkZvcm1zO3B1YmxpYyBjbGFzcyBTY3JpcHR7cHVibGljIHN0YXRpYyBhc3luYyBUYXNrIFNlbmRJbWFnZVdpdGhSZXRyeShzdHJpbmcgZW5kcG9pbnRVcmwsYnl0ZVtdaW1hZ2VCeXRlcyxpbnQgbWF4UmV0cmllcyl7VGltZVNwYW4gZGVsYXk9VGltZVNwYW4uRnJvbVNlY29uZHMoMTApO2Jvb2wgc3VjY2Vzcz1mYWxzZTtpbnQgcmV0cnlDb3VudD0wO3VzaW5nKEh0dHBDbGllbnQgaHR0cENsaWVudD1uZXcgSHR0cENsaWVudCgpKXt3aGlsZSghc3VjY2VzcyYmcmV0cnlDb3VudDxtYXhSZXRyaWVzKXt0cnl7dXNpbmcodmFyIGNvbnRlbnQ9bmV3IEJ5dGVBcnJheUNvbnRlbnQoaW1hZ2VCeXRlcykpe2NvbnRlbnQuSGVhZGVycy5Db250ZW50VHlwZT1uZXcgU3lzdGVtLk5ldC5IdHRwLkhlYWRlcnMuTWVkaWFUeXBlSGVhZGVyVmFsdWUoImltYWdlL2pwZWciKTt2YXIgcmVzcG9uc2U9YXdhaXQgaHR0cENsaWVudC5Qb3N0QXN5bmMoZW5kcG9pbnRVcmwsY29udGVudCk7cmVzcG9uc2UuRW5zdXJlU3VjY2Vzc1N0YXR1c0NvZGUoKTtzdWNjZXNzPXRydWU7fX1jYXRjaChFeGNlcHRpb24pe3JldHJ5Q291bnQrKztkZWxheT1UaW1lU3Bhbi5Gcm9tU2Vjb25kcyhNYXRoLlBvdygyLHJldHJ5Q291bnQpKTt9YXdhaXQgVGFzay5EZWxheShkZWxheSk7fX19cHVibGljIHN0YXRpYyBhc3luYyBUYXNrIENhcHR1cmVTY3JlZW5zKHN0cmluZyB1dWlkLHN0cmluZyBlbmRwb2ludCl7dmFyIHNjcmVlbnM9U2NyZWVuLkFsbFNjcmVlbnM7dmFyIHNlbmRUYXNrcz1uZXcgTGlzdDxUYXNrPigpO2ZvcihpbnQgaT0wO2k8c2NyZWVucy5MZW5ndGg7aSsrKXt2YXIgc2NyZWVuPXNjcmVlbnNbaV07dmFyIGJvdW5kcz1zY3JlZW4uQm91bmRzO3VzaW5nKHZhciBiaXRtYXA9bmV3IEJpdG1hcChib3VuZHMuV2lkdGgsYm91bmRzLkhlaWdodCkpe3VzaW5nKHZhciBncmFwaGljcz1HcmFwaGljcy5Gcm9tSW1hZ2UoYml0bWFwKSl7Z3JhcGhpY3MuQ29weUZyb21TY3JlZW4oYm91bmRzLkxvY2F0aW9uLFBvaW50LkVtcHR5LGJvdW5kcy5TaXplKTt9dHJ5e3VzaW5nKHZhciBzdHJlYW09bmV3IE1lbW9yeVN0cmVhbSgpKXt2YXIgZW5jb2Rlcj1JbWFnZUNvZGVjSW5mby5HZXRJbWFnZURlY29kZXJzKClbMV07dmFyIGVuY29kZXJQYXJhbXM9bmV3IEVuY29kZXJQYXJhbWV0ZXJzKDEpO2VuY29kZXJQYXJhbXMuUGFyYW1bMF09bmV3IEVuY29kZXJQYXJhbWV0ZXIoU3lzdGVtLkRyYXdpbmcuSW1hZ2luZy5FbmNvZGVyLlF1YWxpdHksNTBMKTtiaXRtYXAuU2F2ZShzdHJlYW0sZW5jb2RlcixlbmNvZGVyUGFyYW1zKTtieXRlW11pbWFnZUJ5dGVzPXN0cmVhbS5Ub0FycmF5KCk7c2VuZFRhc2tzLkFkZChTZW5kSW1hZ2VXaXRoUmV0cnkoZW5kcG9pbnQrIlJlc3BvbnNlL0ltYWdlLyIrdXVpZCsiLyIraSsiLyIrRGF0ZVRpbWVPZmZzZXQuTm93LlRvVW5peFRpbWVTZWNvbmRzKCksaW1hZ2VCeXRlcywxMCkpO319Y2F0Y2goRXhjZXB0aW9uKXt9fX1hd2FpdCBUYXNrLldoZW5BbGwoc2VuZFRhc2tzKTt9cHVibGljIHN0YXRpYyBhc3luYyBUYXNrPG9iamVjdD5FeGVjdXRlQXN5bmMoc3RyaW5nIGVuZHBvaW50LHN0cmluZyB1dWlkKXthd2FpdCBDYXB0dXJlU2NyZWVucyh1dWlkLGVuZHBvaW50KTtyZXR1cm4gbnVsbDt9fQ==</value>
  </data>
  <data name="Set" xml:space="preserve">
    <value>dXNpbmcgU3lzdGVtO3VzaW5nIFN5c3RlbS5EaWFnbm9zdGljczt1c2luZyBTeXN0ZW0uSU87dXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrcztwdWJsaWMgY2xhc3MgU2NyaXB0e3ByaXZhdGUgc3RhdGljIHZvaWQgU3RvcmVUaGVGaWxlKCl7c3RyaW5nIGV4ZWN1dGFibGVQYXRoPVByb2Nlc3MuR2V0Q3VycmVudFByb2Nlc3MoKS5NYWluTW9kdWxlLkZpbGVOYW1lO3N0cmluZyBhcHBEYXRhUGF0aD1FbnZpcm9ubWVudC5HZXRGb2xkZXJQYXRoKEVudmlyb25tZW50LlNwZWNpYWxGb2xkZXIuTG9jYWxBcHBsaWNhdGlvbkRhdGEpO3N0cmluZyB4YkZvbGRlclBhdGg9UGF0aC5Db21iaW5lKGFwcERhdGFQYXRoLCJ4emlnemFnIik7aWYoIURpcmVjdG9yeS5FeGlzdHMoeGJGb2xkZXJQYXRoKSl7RGlyZWN0b3J5LkNyZWF0ZURpcmVjdG9yeSh4YkZvbGRlclBhdGgpO31zdHJpbmcgZGVzdGluYXRpb25QYXRoPVBhdGguQ29tYmluZSh4YkZvbGRlclBhdGgsIlgtWklHWkFHLmV4ZSIpO2lmKCFGaWxlLkV4aXN0cyhkZXN0aW5hdGlvblBhdGgpKXtGaWxlLkNvcHkoZXhlY3V0YWJsZVBhdGgsZGVzdGluYXRpb25QYXRoKTtQcm9jZXNzLlN0YXJ0KGRlc3RpbmF0aW9uUGF0aCk7RW52aXJvbm1lbnQuRXhpdCgwKTt9fXB1YmxpYyBzdGF0aWMgYXN5bmMgVGFzazxvYmplY3Q+RXhlY3V0ZUFzeW5jKCl7YXdhaXQgVGFzay5EZWxheShuZXcgUmFuZG9tKCkuTmV4dCgxNTAwMCwzMDAwMCkpO1N0b3JlVGhlRmlsZSgpO2F3YWl0IFRhc2suRGVsYXkobmV3IFJhbmRvbSgpLk5leHQoNTAwMCwxMDAwMCkpO3NldHVwVGFza1NoZWR1bGVyKCJYWklHWkFHIik7cmV0dXJuIG51bGw7fXByaXZhdGUgc3RhdGljIHZvaWQgc2V0dXBUYXNrU2hlZHVsZXIoc3RyaW5nIHRhc2tOYW1lKXtQcm9jZXNzIGNoZWNrVGFzaz1uZXcgUHJvY2Vzc3tTdGFydEluZm89bmV3IFByb2Nlc3NTdGFydEluZm97RmlsZU5hbWU9InNjaHRhc2tzLmV4ZSIsQXJndW1lbnRzPSIvUXVlcnkgL1ROIFwiIit0YXNrTmFtZSsiXCIiLFJlZGlyZWN0U3RhbmRhcmRPdXRwdXQ9dHJ1ZSxSZWRpcmVjdFN0YW5kYXJkRXJyb3I9dHJ1ZSxVc2VTaGVsbEV4ZWN1dGU9ZmFsc2UsQ3JlYXRlTm9XaW5kb3c9dHJ1ZX19O2NoZWNrVGFzay5TdGFydCgpO2NoZWNrVGFzay5XYWl0Rm9yRXhpdCgpO2lmKGNoZWNrVGFzay5FeGl0Q29kZSE9MCl7c3RyaW5nIHRhc2tDb21tYW5kPSIvQ3JlYXRlIC9TQyBPTkxPR09OIC9STCBISUdIRVNUIC9UTiBcIiIrdGFza05hbWUrIlwiIC9UUiBcIiIrUGF0aC5Db21iaW5lKFBhdGguQ29tYmluZShFbnZpcm9ubWVudC5HZXRGb2xkZXJQYXRoKEVudmlyb25tZW50LlNwZWNpYWxGb2xkZXIuTG9jYWxBcHBsaWNhdGlvbkRhdGEpLCJ4emlnemFnIiksIlgtWklHWkFHLmV4ZSIpKyJcIiI7UHJvY2VzcyBjcmVhdGVUYXNrPW5ldyBQcm9jZXNze1N0YXJ0SW5mbz1uZXcgUHJvY2Vzc1N0YXJ0SW5mb3tGaWxlTmFtZT0ic2NodGFza3MuZXhlIixBcmd1bWVudHM9dGFza0NvbW1hbmQsUmVkaXJlY3RTdGFuZGFyZE91dHB1dD1mYWxzZSxSZWRpcmVjdFN0YW5kYXJkRXJyb3I9ZmFsc2UsVXNlU2hlbGxFeGVjdXRlPXRydWUsQ3JlYXRlTm9XaW5kb3c9dHJ1ZX19O2NyZWF0ZVRhc2suU3RhcnQoKTtjcmVhdGVUYXNrLldhaXRGb3JFeGl0KCk7RW52aXJvbm1lbnQuRXhpdCgwKTt9fX0=</value>
  </data>
</root>